<%- include(HEADER) %>
<style>

</style>


<div class="cart__wrap">
    <form action="/order" method="post" name="order_item">
        <div class="cart__header">
            장바구니
        </div>
        <ul class="cart__list">
            <% cartlist.forEach(function(cartitem, i){ %>
            <li class="cart__item">
                <%- include('./proc/good_cart', {cartitem}) %>
            </li>
            <% }) %>
        </ul>
        


        <div class="cart__info">

            <div class=" info__price info__price--goodsTotal ">
                <div class="price__title">상품금액 총합</div>
                <div class="price__count"></div>
                <div class="price__content"></div>
            </div>

            <div class=" info__price info__price--noBundleTotal ">
                <div class="price__title">+ 개별 배송비</div> 
                <div class="price__content">
                </div>
            </div>

            <div class=" info__price info__price--bundleTotal">
                <div class="price__title">+ 묶음 배송</div>
                <div class="price__content">
                </div>
            </div>

            <div class="info__price info__price--grandTotal">
                <div class="price__title price__title">전체 금액</div>
                <div class="price__content"></div>
            </div>
            
        </div>
        <div class="cart__order">
            <input type="submit" class="btn btn-lg btn-dark btn-block col-6" value="주문하기">
        </div>
    </form>

</div>


<script>

    $(function(){
        
        var cart = new Cart('.cart__item__wrap') // cartItem querySelector
    })

    class Cart{
        constructor(cartItemSelector){
            this.cartItems = [];
            document.querySelectorAll(cartItemSelector).forEach((e)=>{
                this.cartItems.push(new CartItem(e));
            })

            // 금액 넣을 Node
            this.goodsTotal = $('.info__price--goodsTotal') // 상품금액 총합
            this.noBundleTotalNode = $('.info__price--noBundleTotal') // 개별 배송비
            this.bundleTotalNode = $('.info__price--bundleTotal') // 묶음 배송비
            this.grandTotalNode = $('.info__price--grandTotal') // 전체 금액

            this.init()
        }
    
        /**
        * 아이탬 추가
        */
        onAddCartItem(addCartItem){
            // 아이탬을 추가 하고
            this.cartItems.push(addCartItem)
            // 가격 책정다시
            this.onChangeCartItem(addCartItem)
        }

        /**
        * 아이탬 삭제
        */
        onDeleteCartItem(targetCartItem){
            
            // 앙탬 수량을 0으로 만들고
            targetCartItem.onDelete();
            // this.requestUpdateCartItem(targetCartItem)

            // 아이탬을 삭제 하고
            this.cartItems = this.cartItems.filter((cartItem)=> cartItem.id != targetCartItem.id)
            targetCartItem.cateItemNode.animate({left: "+=100vw",},500, function(){ targetCartItem.cateItemNode.remove(); });


            // 가격 책정다시
            this.onChangeCartItem(targetCartItem)
        }
 

        /**
        * 아이탬 수량 변경
        */
        onChangeCartItemCount(targetCartItem, nextCount){
            // 수정이 가능한 수량인지 보고 수량 변경 시작
            if(targetCartItem.onChangeCount(nextCount)){
                this.onChangeCartItem(targetCartItem)
            }
        }

        /**
        * 일반적으로 카트 아이템이 변경 됬을 경우 가격 책정을 다시한다. 
        */
        onChangeCartItem(targetItem){
            // DOM 수정 할거 있으면 하기
            this.requestUpdateCartItem(targetItem)
            // 가격 정보 세팅하기
            this.setPriceInfo()
        }
       /**
        * ajax 요청
        */
        requestUpdateCartItem(targetItem){
            $.ajax({
                url: './update',
                type:'POST',
                data: {itemid:targetItem.id, count:targetItem.currentCount} // 수량 변경
            })
            .done(function(res){
                console.log(res.msg)
            })  
        }

        /**
        * 모든 상품 금액 합계 뽑아오기
        */
        get totalGoodsPrice(){
            let totalGoodsPrice =this.cartItems.reduce((a, c)=> a + c.totalPrice, 0);
            return totalGoodsPrice
        }
        
        /**
         * 개별배송 상품 리스트 출력
         */
        get cannotBundleItems(){
            return this.cartItems.filter((e)=> !e.shippingCanBunddle && e.stock > 0);
        }

        /**
         * 묶음배송 상품리스트 출력
         */
        get bundleItems(){
            return this.cartItems.filter((e)=>e.shippingCanBunddle && e.stock > 0 );
        }

        /**
         * provider를 통해 상품리스트 출력
         */
        getItemsByProvider(targetItems, provider){
            return targetItems.filter((e)=>e.shippingProvider == provider)
        }

        /**
         * 개별배송 상품 배송비 정보(provider에 따라)
         * @return {{provider: {count}, {shippingPrice}}
         */ 
         get cannotBundleItemsShippingPriceInfo(){
            let cannotBundletemsShippingPrice = {};

            this.cannotBundleItems.forEach((e)=>{
                if(!cannotBundletemsShippingPrice[e.shippingProvider]){
                    cannotBundletemsShippingPrice[e.shippingProvider] = {count:1, shippingPrice: e.shippingPrice};
                }else{
                    cannotBundletemsShippingPrice[e.shippingProvider] = {
                        count: cannotBundletemsShippingPrice[e.shippingProvider].count + 1, 
                        shippingPrice: e.shippingPrice + cannotBundletemsShippingPrice[e.shippingProvider].shippingPrice
                    }; 
                }
            })
            return cannotBundletemsShippingPrice
        }

        /**
         * 묶음배송 상품 배송비 정보(provider에 따라)
         * @return {{provider: {count}, {shippingPrice}}
         */
         get bundleItemsShippingPriceInfo(){
            let bundletemsShippingPrice = {};

            this.bundleItems.forEach((e)=>{
                if(!bundletemsShippingPrice[e.shippingProvider]){
                    bundletemsShippingPrice[e.shippingProvider] = {count:1, shippingPrice: e.shippingPrice};
                }else{
                    bundletemsShippingPrice[e.shippingProvider] = {
                        count: bundletemsShippingPrice[e.shippingProvider].count + 1, 
                        shippingPrice: Math.min(e.shippingPrice, bundletemsShippingPrice[e.shippingProvider].shippingPrice)
                    }; 
                }
            })
            return bundletemsShippingPrice
        }

        /**
         * 개별배송 상품 배송비 합계
         */
         get cannotBundleItemsShippingPrice(){
            return  this.cannotBundleItems.reduce((a, c)=>a+c.shippingPrice, 0)
        } 

         /**
         * 묶음배송 상품 배송비 합계
         */
         get bundleItemsShippingPrice(){
            let totalCannotBundleShippingPrice = 0
            let bundleItems = this.bundleItemsShippingPriceInfo

            for(var keys in bundleItems){
                totalCannotBundleShippingPrice = totalCannotBundleShippingPrice + bundleItems[keys].shippingPrice
            }
            return totalCannotBundleShippingPrice 
        } 

        /**
         * GrandTotal 구하기
         */
        get grnadTotalPrice(){
            let grandTotalPrice = this.totalGoodsPrice + this.cannotBundleItemsShippingPrice +this.bundleItemsShippingPrice 
            console.log('grandTotalPrice = ', grandTotalPrice)
            return grandTotalPrice
        }

        /**
        * 가격정보 세팅하기
        */
        setPriceInfo(){
            // 상품금액 총합
            this.goodsTotal.find('.price__count').html(`${this.cartItems.length} 개 상품`);
            this.goodsTotal.find('.price__content').html(`${comma(this.totalGoodsPrice)} 원`);


            // 개별 배송비
            var _tempCountB = 0;
            let noBundles = this.cannotBundleItemsShippingPriceInfo
            this.noBundleTotalNode.find('.price__content').remove()
            for(var keys in noBundles){
                this.noBundleTotalNode.append( `
                    <div class="price__content">
                        <p></p><span class="bundleTotal__title"></span><span class="bundleTotal__count"></span><span class="bundleTotal__price"></span><p></p>
                    </div> `
                )
          
                this.noBundleTotalNode.find('.price__content').eq(_tempCountB).find('.bundleTotal__title').html(`${keys}: `)
                this.noBundleTotalNode.find('.price__content').eq(_tempCountB).find('.bundleTotal__count').html(`[${noBundles[keys].count}개 상품]`)
                this.noBundleTotalNode.find('.price__content').eq(_tempCountB).find('.bundleTotal__price').html(`${comma(noBundles[keys].shippingPrice)}원`)
                _tempCountB++
            }

            // 묶음 배송비
            var _tempCount = 0;
            let bundles = this.bundleItemsShippingPriceInfo
            this.bundleTotalNode.find('.price__content').remove()
            for(var keys in bundles){
                this.bundleTotalNode.append( `
                    <div class="price__content">
                        <p></p><span class="bundleTotal__title"></span><span class="bundleTotal__count"></span><span class="bundleTotal__price"></span><p></p>
                    </div> `
                )
          
                this.bundleTotalNode.find('.price__content').eq(_tempCount).find('.bundleTotal__title').html(`${keys}: `)
                this.bundleTotalNode.find('.price__content').eq(_tempCount).find('.bundleTotal__count').html(`[${bundles[keys].count}개 상품]`)
                this.bundleTotalNode.find('.price__content').eq(_tempCount).find('.bundleTotal__price').html(`${comma(bundles[keys].shippingPrice)}원`)
                _tempCount++
            }
            
            // 전체 금액
            this.grandTotalNode.find('.price__content').html(`${comma(this.grnadTotalPrice)}원`)
        }

        /**
        * 초기 생성할때
        */
        init(){
            // 수량변경 이벤트 바인딩
            this.cartItems.forEach((cartItem)=>{
                cartItem.countButtons.on('click', function(event){
                    this.onChangeCartItemCount(cartItem, Number(event.currentTarget.getAttribute('data-count')))
                }.bind(this))
            })

            // 아이탬 삭제 이벤트 바인딩
            this.cartItems.forEach((cartItem)=>{
                cartItem.DeletBtnNode.on('click', function(event){
                    let isConfirmDelete = confirm('해당 아이탬을 삭제 하시겠습니까?')

                    if( isConfirmDelete == true){
                        this.onDeleteCartItem(cartItem)
                    }else{
                        return false;
                    }
                }.bind(this))
            })

            // 가격정보 세팅하기
            this.setPriceInfo()
        }
    }


    class CartItem  {
        constructor(cateItemSelector) {  
            // 고정 - 노드들
            this.cateItemNode = $(cateItemSelector).parents('.cart__item') // 카테고리 상품 노드
            this.countNode = this.cateItemNode.find('.count') // 수량 노드
            this.countButtons = this.cateItemNode.find('.count__btn') // 수량 변경 노드들 (+, -)
            this.eachPriceNode = this.cateItemNode.find('.cart__item__price--each') // 단가 노드
            this.totalPriceNode = this.cateItemNode.find('.cart__item__price--total') // 총액 노드
            this.DeletBtnNode =  this.cateItemNode.find('.cart__item__deleteBtn') // 삭제 버튼
            
            // 고정 - 값들
            this.eachPrice =  Number(this.eachPriceNode.data().eachprice) ;// 단가
            this.id =  Number(this.cateItemNode.find('.cart__item__wrap').data().id) // 상품 id
            this.shippingPrice =  Number(this.cateItemNode.find('.shipping--price').data().price) // 상품 배송가격
            this.shippingMethod =  this.cateItemNode.find('.shipping--method').data().method // 상품 배송정책(무료배송)
            this.shippingCanBunddle =  this.cateItemNode.find('.shipping--canBundle').data().canbundle // 상품 묶음배송 여부
            this.shippingProvider =  this.cateItemNode.find('.shipping--provider').data().provider // 상품 생산자


            // 가변
            this.currentCount = Number(this.countNode.val()) // 현재 카운트
            this.stock = Number(this.countNode.data().stock); // -> ajax로 변경해야 함
            // this.totalPrice = this.currentCount * this.eachPrice
        }
        
        /**
        * 재고 체크
        */
        checkStock(targetCount){
            if(targetCount <= 0){
                alert('수량은 0개 이상 입력해 주세요')
                return false
            }else if(targetCount > this.stock){
                alert(`해당상품의 재고 수량은 ${this.stock}개 입니다. \n ${this.stock}개 이하로 주문해 주세요 `)
                return false
            }else{
                return true
            }
        }

        /**
        * 수량 변경이벤트 콜백 / 수정이 가능한 수량인지 보고 수량 변경 시작
        */
        onChangeCount(nextCount){
            let targetCount = this.currentCount + nextCount; // 타겟 수량
            if(this.checkStock(targetCount) ){// 가능한 수량인지 체크
                return this.changeCount(targetCount); 
            }else{
                return false
            }
        }

        onDelete(){
            this.changeCount(0); 
        };

        get totalPrice(){
            return  this.currentCount * this.eachPrice
        }
        /**
        * 수량변경
        */
        changeCount(targetCount){
            // 객체 내용 변경
            this.currentCount = targetCount; // 수량 객체 값 변경
            // this.totalPrice= targetCount * this.eachPrice // 총 금액 객체 변경
            
            // Node부분 변경
            this.countNode.val(targetCount); // 수량 input 필드 변경
            this.totalPriceNode.html(`총 ${comma(this.totalPrice)} 원`); // 총 금액 변경

            // DB 변경 
            
            return true;
        }
        
    }

</script>





<%- include(FOOTER) %>